1) HTML CSS

HTML (HyperText Markup Language) - стандартизированный язык разметки документов для 
просмотра веб-страниц в браузере. Веб-браузеры получают HTML документ от сервера по
протоколам HTTP/HTTPS или открывают с локального диска, далее интрепретируют код в
интерфейс, который будет отображаться на экране монитора.

структура HTML:

первая строка - <!DOCTYPE html> - это строка служит указателем для браузера,
что у нас документ формата html, можно написать xml.

далее идёт обёртка в теге <html lang="en"></html>, которая имеет свои атрибуты,
например lang, title, manifest.

в html теге присутствует 2 блока <head></head> и <body></body>

<head></head> - блок предназначен для заголовка страницы и технической информации.
внутри <head></head> допускается размещать элементы <link>, <meta>, <script>, <style>, <title>.

<body></body> - блок предназначенный для размещения того, что мы хотим увидеть на странице.
Весь наш контент располгается там. Мы можем размещать информацию вида текст, изображения, теги,
скрипты JavaScript и т.д. Часто тег body используется для размещения обработчика событий, например:
onload.

data-attribute -  Вспомогательный атрибут, позволяющий ссылаться на элемент или его данные.

CSS (Cascading Style Sheets) -  формальный язык описания внешнего вида документа (веб-страницы), написанного 
с использованием языка разметки (чаще всего HTML или XHTML). CSS используется создателями веб-страниц для задания 
цветов, шрифтов, стилей, расположения отдельных блоков и других аспектов представления внешнего вида этих веб-страниц.

display (CSS) определяет тип отображения элемента, имеющий два основных свойства, определяющих генерацию 
боксов — внешний тип отображения определяет расположение бокса и внутренний тип отображения определяет расположение 
дочерних элементов бокса
display: block;
display: inline;
display: flex;
display: grid;

position указывает, как элемент позиционируется в документе.
position бывает relative, absolute, fixed либо sticky

Относительно позиционируемый элемент это элемент с position relative. 
Свойства top и bottom определяют смещение по вертикали от его нормального положения; свойства left и right 
задают горизонтальное смещение.

Абсолютно позиционируемый элемент — это элемент с position absolute или fixed. top, 
right, bottom и left задают смещения от краёв содержащего блок элемента. (Содержащий блок является предком, 
относительно которого расположен элемент.) Если элемент имеет поля, они добавляются к смещению. Элемент устанавливает 
новый контекст форматирования блока (BFC) для своего содержимого.

Элемент с липкой позицией — это элемент c position sticky. Он рассматривается 
как относительно позиционированный до тех пор, пока содержащий его блок не пересечёт указанный порог (например, установка 
top в значение, отличное от auto) внутри его корня потока (или в контейнере, в котором он прокручивается), после чего он 
обрабатывается как «застрявший» до тех пор, пока не встретит противоположный край содержащего его блока.

// Таблица приоритетности селекторов.
вес селекторов 
// 1) !import
// 2) inline style
// 3) combined selectors
// 4) ID
// 5) class
// 6) attribute
// 7) element
// 8) *
// 9) inherited styles

// the strongest comination of selectors is !import + inline styles

// Псевдоклассы в CSS

// * selector:pseudo-class {
  // property: value
// }

// There are a lot of pseudo-classes
// Some of them:
// :active
// :checked
// :disabled
// :first
// :first-child
// :focus
// :hover
// :nth-child
// :visited

2) DOM

DOM (Document Object Model) - HTML/XML документы представлены в браузере в виде DOM-дерева.
- Теги становятся узлами-элементами и формируют структуру документа.
- Текст становится текстовыми узлами.
- Всё, что записано в HTML, есть и в DOM-дереве, даже комментарии.

Для изменения элементов или проверки DOM-дерева мы можем использовать инструменты разработчика в браузере.
Все операции с DOM начинаются с document.

Получив DOM-узел, мы можем перейти к его ближайшим соседям используя навигационные ссылки.
Есть два основных набора ссылок:

- Для всех узлов: parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling.
- Только для узлов-элементов: parentElement, children, firstElementChild, lastElementChild, 
previousElementSibling, nextElementSibling.

Есть 6 основных методов поиска элементов в DOM:

Метод	           Ищет по...	           Ищет внутри элемента?	Возвращает живую коллекцию?
querySelector	      CSS-selector	             ✔	                          -
querySelectorAll      CSS-selector	             ✔	                          -
getElementById	          id	                      -	                          -
getElementsByName	 name	                      -	                          ✔
getElementsByTagName	tag or '*'	              ✔	                          ✔
getElementsByClassName	 class	                      ✔	                          ✔
Живая коллекция - эта так, с которой мы можем взаимодействовать. 
Безусловно, наиболее часто используемыми в настоящее время являются методы querySelector и querySelectorAll, 
но и методы getElement(s)By* могут быть полезны в отдельных случаях, а также встречаются в старом коде.

3) `use strict`

Режим strict, введённый в ECMAScript 5, позволяет использовать более строгий вариант JavaScript. 
Это не просто подмножество языка: в нем сознательно используется семантика, отличающаяся от обычно принятой.


Строгий режим принёс ряд изменений в обычную семантику JavaScript. Во-первых, строгий режим заменяет исключениями 
некоторые ошибки, которые интерпретатор JavaScript ранее молча пропускал. Во-вторых, строгий режим исправляет ошибки, 
которые мешали движкам JavaScript выполнять оптимизацию -- в некоторых случаях код в строгом режиме может быть оптимизирован 
для более быстрого выполнения, чем код в обычном режиме. В-третьих, строгий режим запрещает использовать некоторые элементы синтаксиса, 
которые, вероятно, в следующих версиях ECMAScript получат особый смысл.

чтобы использовать строгий режим нужно написать 'use strict'

"use strict";
                      // Предполагая, что не существует глобальной переменной
mistypeVaraible = 17; // mistypedVaraible, эта строка выбросит ReferenceError
                      // из-за опечатки в имени переменной

"use strict";
delete Object.prototype; // выдаст TypeError

function sum(a, a, c) { // !!! синтаксическая ошибка
  "use strict";
  return a + a + c; // ошибка, если код был запущен
}

В большинстве браузеров в настоящее время строгий режим реализован.

4) Теги srcipt, аттрибуты async, defer.

<script> - это секция для JavaScript кода. Эта секция зависит от позиции в html документе. После секции <script> мы не можем помещать
html, который зависит от JavaScript кода. Решение этой проблемы перемещение <script> в конец тега <body>, но в этом случае у людей с плохим
интернетом будут подвисания. У нас есть defer и async атрибуты для <script>. Эти скрипты выполняются на заднем плане.
defer зависит от места в body. async зависит от скорости скачивания.

      |      The order of execution            |     DOMContentLoaded
async | Нет порядка выполнения.                | Не важно. Может скачиваться и запускаться 
      | Первый скачанный скрипт, выполняется   | перед загрузкой страницы. Это обычно происходит, когда
      | первым.                                | скрипты достаточно маленькие, а документ достаточно большой.
defer | Есть порядок выполнения. Порядок       | Выполняются после того как документ загрузился и обработан, 
      | определяется тем, как расположен в     | перед DOMContentLoaded.
      | документе.                             |


5) Глобальный объект window
window — это глобальный объект предоставляемый браузером, внутри которого содержатся все встроенные в браузерный JavaScript функции и свойства.
window хранит в себе множество объектов и функций: DOM(Document Object Model), BOM(Browser object model), JavaScript

DOM - это объект document.
BOM - это массив объектов screen, navigator, history, frames, location, fetch
JavaScript - Object, Function, Array и т.д. 

примеры window.alert, window.console.log, window.setTimeout.
их очень много.

6) Способы отправки запроса на сервер

1) Скрипт - скрипт в котором происходит выполнение запроса на сервер.
2) Fetch - fetch api через которые мы также может выполнять запросы на сервер.
3) XmlHTTPRequest - это встроенный в браузер объект, который даёт возможность делать запросы к серверу без перезагрузки страницы.
4) Form - делать запросы через форму.
5) Линка - также по сути является элементом, который делает GET запрос для получения страницы.

7) Кэширование(как работает и зачем нужно)

Производительность веб-сайтов и приложений можно значительно повысить за счёт повторного использования ранее полученных ресурсов. 
Веб-кеши сокращают задержку и снижают сетевой трафик, уменьшая тем самым время, необходимое для отображения ресурсов. Используя 
HTTP-кеширование, сайты становятся более отзывчивыми.

Техника кеширования заключается в сохранении копии полученного ресурса для возврата этой копии в ответ на дальнейшие запросы. Запрос 
на ресурс, уже имеющийся в веб-кеше, перехватывается, и вместо обращения к исходному серверу выполняется загрузка копии из кеша. Таким 
образом снижается нагрузка на сервер, которому не приходится самому обслуживать всех клиентов, и повышается производительность — кеш ближе 
к клиенту и ресурс передаётся быстрее. Кеширование является основным источником повышения производительности веб-сайтов

Существует 2 типа кэшей:

- Приватный кеш браузера
Приватный кеш предназначен для отдельного пользователя.Он используется для доступа к ранее загруженным страницам при навигации назад/вперёд, 
позволяет сохранять страницы, или просматривать их код, не обращаясь лишний раз к серверу. Кроме того, кеш полезен при отключении от сети.

- Общий прокси-кэш
Кеш совместного использования — это кеш, который сохраняет ответы, чтобы их потом могли использовать разные пользователи. Например, в локальной 
сети вашего провайдера или компании, может быть установлен прокси, обслуживающий множество пользователей, чтобы можно было повторно использовать 
популярные ресурсы, сокращая тем самым сетевой трафик и время ожидания.

управление кешированием происходит с помощью заголовка Cache-control

полное отсутствие кэширования
Cache-Control: no-store
кэшировать, но проверять актуальность
Cashe-Control: no-cashe
Приватные и обще кэши
Cache-Control: private
Cache-Control: public
Срок действия
Cache-Control: max-age=31536000
Проверка актуальности
Сache-Control: must-revalidate









