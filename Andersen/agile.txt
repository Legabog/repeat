Методологии разработки ПО

Code and fix — модель кодирования и устранения ошибок;
Waterfall Model — каскадная модель, или «водопад»;
V-model — V-образная модель, разработка через тестирование;
Incremental Model — инкрементная модель;
Iterative Model — итеративная (или итерационная) модель;
Spiral Model — спиральная модель;
Chaos model — модель хаоса;
Prototype Model — прототипная модель.

Самые популярные: Waterfall, V-model, Incremental, Iterative, Spiral.

1) Waterfall:

В этой модели всё идёт поэтапно.
первый этап -> второй -> третий

Преимущества Waterfall:
- Разработку достаточно просто контролировать. Заказчик всегда знает, 
чем сейчас заняты программисты
- Стоимость проекта определяется на начальном этапе.
Недостатки Waterfall:
- Исправление ошибок стоять дорого.
- Заказчик видит результат в конце разработки и только тогда может дать обратную связь.
- Разработчики пишут много документации, это задерживает работу.

При работе с Waterfall основная задача - написать подробные требования к разработке.

2) V-model:

Это усовершенствованный тип от Waterfall, где заказчик с командой программистов одновременно 
составвляют требования к системе и описывают тесты на каждом этапе.

Преимущества V-model:
- Количество ошибок в архитектуре ПО сводится к минимуму
Недостатки V-model:
- Если при разработке архитектуры была допущена ошибка, то она будет дорогой как в Waterfall

V-model подходит для проектов, в которых важна надёжность и цена ошибки очень высока.

3) Incremental Model

Это модель разработки по частям.
Ситуация: Заказчик решил запустить соцсеть. Создали соцсеть и её основные функции. После этого
разработка идёт по частям, добавление функционала и т.д..

Преимущества Incremental:
- Не нужно вкладывать много денег на начальном этапе.
- Можно получить фидбек от пользователей и обновить какой-то функционал.
- Ошибки обходятся дешевле.
Недостатки Incremental:
- Каждая команда программистов разрабатывает свою функциональность и может реализовать интерфейс
продукта по своему.
- Разработчкики буду оттягивать доработку основной функциональности и будут делать мелкие правки.

4) Iterative Model

Это модель, при которой заказчик не обязан понимать, какой продукт хочет получить в итоге,
и может не прописывать сразу подробное техзадание.

Преимущества Iterative Model:
- Быстрый выпуск минимального продукта.
- Постоянное тестирование пользователями.
Недостатки Iterative Model:
- Отсутствие фиксированного бюджета.
- Использование на начальном этапе баз данных или серверов приходиться переделывать так как
их сложно масштабировать, а вторые не выдерживают нагрузки.

Итеративная модель подходит для работы над большими проектами с неопределёнными требованиями,
либо для задач с инновационным подходом, когда заказчик не уверен в результате. 

5) Spiral Model

Используя эту модель заказчик и команда разработчиков серёзно анализируют риски проекта и вы-
полняют его итерациями. Итерации основыеваются на предыдущие итерации и принимается решение про-
должать проект или нет.

Преимущества Spiral Model:
- Большое время уделяется проработке рисков.
Недостатки Spiral Model:
- Застрять на начальном этапе - бесконечно совершенствовать первую версию продукта.
- Разработка длится долго и дорого.

Agile - подход к разработке. Включает в себя практики, подходы и методологии.

экстремальное программирование (Extreme Programming, XP);
бережливую разработку программного обеспечения (Lean);
метология для управления проектами Scrum;
разработку, управляемую функциональностью (Feature-driven development, FDD);
разработку через тестирование (Test-driven development, TDD);
методологию «чистой комнаты» (Cleanroom Software Engineering);
итеративно-инкрементальный метод разработки (OpenUP);
методологию разработки Microsoft Solutions Framework (MSF);
метод разработки динамических систем (Dynamic Systems Development Method, DSDM);
метод управления разработкой Kanban.

Например, Scrum чаще называют не методологией, а фреймворком. В чём разница? Фреймворк — 
это более сформированная методология со строгими правилами. В скраме все роли и процессы
чётко прописаны. Помимо Scrum, часто используют Kanban. 

Kanban
Сегодня это одна из наиболее популярных методологий разработки ПО.
Команда ведёт работу с помощью виртуальной доски, которая разбита на этапы проекта.
Каждый участник видит, какие задачи находятся в работе, какие — застряли на одном из
этапов, а какие уже дошли до его столбца и требуют внимания. 

В отличие от скрама, в канбане можно взять срочные задачи в разработку сразу,
не дожидаясь начала следующего спринта. 
Канбан удобно использовать не только в работе, но и в личных целях — распределять
собственные планы или задачи семьи на выходные, наглядно отслеживать прогресс.