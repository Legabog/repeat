Событие – это сигнал от браузера о том, что что-то произошло. 
Все DOM-узлы подают такие сигналы (хотя события бывают и не только в DOM).

События мыши:

click – происходит, когда кликнули на элемент левой кнопкой мыши (на устройствах с сенсорными 
экранами оно происходит при касании).
contextmenu – происходит, когда кликнули на элемент правой кнопкой мыши.
mouseover / mouseout – когда мышь наводится на / покидает элемент.
mousedown / mouseup – когда нажали / отжали кнопку мыши на элементе.
mousemove – при движении мыши.

События на элементах управления:

submit – пользователь отправил форму <form>.
focus – пользователь фокусируется на элементе, например нажимает на <input>.
Клавиатурные события:

keydown и keyup – когда пользователь нажимает / отпускает клавишу.

События документа:

DOMContentLoaded – когда HTML загружен и обработан, DOM документа полностью построен и доступен.

Событию можно назначить обработчик, то есть функцию, которая сработает, как только событие произошло.
Именно благодаря обработчикам JavaScript-код может реагировать на действия пользователя.
Есть несколько способов назначить событию обработчик. Сейчас мы их рассмотрим, начиная с самого 
простого.

- Использование атрибута HTML
Обработчик может быть назначен прямо в разметке, в атрибуте, который называется on<событие>.
<input value="Нажми меня" onclick="alert('Клик!')" type="button">

- Использование свойства DOM-объекта
Можно назначать обработчик, используя свойство DOM-элемента on<событие>.

К примеру, elem.onclick:

<input id="elem" type="button" value="Нажми меня!">
<script>
  elem.onclick = function() {
    alert('Спасибо');
  };
</script>

Назначить более одного обработчика событий таким способом нельзя.
Разработчики стандартов достаточно давно это поняли и предложили альтернативный способ назначения 
обработчиков при помощи специальных методов addEventListener и removeEventListener. 
Они свободны от указанного недостатка.

element.addEventListener(event, handler[, options]);
element.removeEventListener(event, handler[, options]);
event - имя события, например "click".
handler - ссылка на функцию-обработчик.
options - дополнительный объект со свойствами.

Чтобы хорошо обработать событие, могут понадобиться детали того, что произошло. Не просто «клик» 
или «нажатие клавиши», а также – какие координаты указателя мыши, какая клавиша нажата и 
так далее.

Когда происходит событие, браузер создаёт объект события, записывает в него детали и 
передаёт его в качестве аргумента функции-обработчику.

пример input, в котором мы берём event.targetValue

Мы можем назначить обработчиком не только функцию, но и объект при помощи addEventListener. В этом случае, когда происходит событие, вызывается метод объекта handleEvent.

К примеру:

<button id="elem">Нажми меня</button>

<script>
  elem.addEventListener('click', {
    handleEvent(event) {
      alert(event.type + " на " + event.currentTarget);
    }
  });
</script>

Всплытие и погружение

Стандарт DOM Events описывает 3 фазы прохода события:

Фаза погружения (capturing phase) – событие сначала идёт сверху вниз.
Фаза цели (target phase) – событие достигло целевого(исходного) элемента.
Фаза всплытия (bubbling stage) – событие начинает всплывать.

Всплытие - это когда на каком-либо элементе происходит событие, обработчики сначала 
срабатывают на нём, потом на его родителе, затем выше и так далее, вверх по цепочке предков.

Для того, чтобы остановить эффект всплытия используется event.stopPropagation(). После того
как мы добавим его. Событие не будет распространяться дальше.

Чтобы поймать событие на стадии погружения, нужно использовать третий аргумент capture вот так:

elem.addEventListener(..., {capture: true})
// или просто "true", как сокращение для {capture: true}
elem.addEventListener(..., true)
Существуют два варианта значений опции capture:

Если аргумент false (по умолчанию), то событие будет поймано при всплытии.
Если аргумент true, то событие будет перехвачено при погружении.









